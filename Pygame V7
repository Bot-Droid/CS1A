import pygame
import random
import os

WIDTH = 1200
HEIGHT = 600 
FPS = 30
GROUND = HEIGHT - 30
SLOW = 3
FAST = 8

PLAYER_ACC = 0.9
PLAYER_FRICTION = -0.12
PLAYER_GRAV = 0.9
vec = pygame.math.Vector2

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
ALEXYELLOW = (235, 194, 12)

font_name = pygame.font.match_font('arial')
def draw_text(surf, text, size, x, y):
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, GREEN)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surf.blit(text_surface, text_rect)

def show_start_screen():
    screen.fill(BLACK)
    draw_text(screen, "Boss Rush", 64, WIDTH / 2, HEIGHT / 4)
    draw_text(screen, "Arrow Keys to move, space to shoot, shift to dash, and ctrl to pause", 22, WIDTH / 2, HEIGHT / 2)
    draw_text(screen, "Press enter to begin", 18, WIDTH / 2, HEIGHT * 3 / 4)
    pygame.display.flip()

    waiting = True
    while waiting:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_RETURN:
                    waiting = False

class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join(img_folder, "sprite_0.png")).convert()
        self.image=pygame.transform.scale(self.image,(144,144))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.pos = vec(10, GROUND - 60)
        self.vel = vec(0, 0)
        self.acc = vec(0, 0)
        self.rect.center = (WIDTH / 2, HEIGHT / 2)
        self.y_speed = 5
        self.shoot_delay = 250
        self.last_shot = pygame.time.get_ticks()
    def update(self):
        self.acc = vec(0, PLAYER_GRAV)
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_RIGHT]:
            self.acc.x += PLAYER_ACC
        if keystate[pygame.K_LEFT]:
            self.acc.x += -PLAYER_ACC
        if keystate[pygame.K_SPACE]:
            self.shoot()
        if self.vel.y == 0 and keystate[pygame.K_UP]:
            self.vel.y = -20
        self.acc.x += self.vel.x * PLAYER_FRICTION
        self.vel += self.acc
        self.pos += self.vel + 0.5 * self.acc
        if self.pos.y > WIDTH:
            self.pos.y = 0
        if self.pos.x < 0:
            self.pos.x = WIDTH
        if self.pos.x > WIDTH:
            self.pos.x = 0
        if self.pos.y > GROUND:
            self.pos.y = GROUND + 1
            self.vel.y = 0

        hits = pygame.sprite.spritecollide(self, platforms, False)
        if hits:
            if self.rect.top > hits[0].rect.top:
                self.pos.y = hits[0].rect.bottom + 25 + 1
                self.vel.y = 0
            else:
                self.pos.y = hits[0].rect.top + 1
                self.vel.y = 0
        
        self.rect.midbottom = self.pos

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            bullet = Bullet(self.rect.centerx, self.rect.top)
            all_sprites.add(bullet)
            bullets.add(bullet)
            #shoot_sound.play()

class Platform(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((100,25))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.x = 10
        self.rect.y = HEIGHT - 20
        self.rect.center = (WIDTH / 2, HEIGHT * 0.65)

    def update(self):
        self.rect.x += -5
        if self.rect.right < 0:
            self.rect.left = WIDTH

class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join(img_folder, "Bullet.png")).convert()
        self.image = pygame.transform.scale(self.image,(625, 541))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speedy = -10
        print("shoot")
    def update(self):
        self.rect.y += self.speedy
        if self.rect.bottom < 0:
            self.kill()
    
game_folder = os.path.dirname(__file__)
img_folder = os.path.join(game_folder, "img")

pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("My Game")

clock = pygame.time.Clock()

all_sprites = pygame.sprite.Group()
player = Player()
all_sprites.add(player)

platform = Platform()
all_sprites.add(platform)
platforms = pygame.sprite.Group()
platforms.add(platform)
bullets = pygame.sprite.Group()

start = True
running = True
while running:
    clock.tick(FPS)
    if start:
        show_start_screen()
        start = False
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    all_sprites.update()
    screen.fill(RED)
    all_sprites.draw(screen)
    pygame.display.flip()
pygame.quit()




from settings import *

class HealthBar(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.healthbars = [
            pygame.image.load(os.path.join(img_folder, "health_bar0.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "health_bar1.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "health_bar2.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "health_bar3.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "health_bar4.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "health_bar5.png")).convert()
            ]
        self.healthbar_count = 0

        self.image = self.healthbars[self.healthbar_count]
        self.image = pygame.transform.scale(self.image, (100, 50))
        self.image.set_colorkey(BLACK)

        #ESTABLISH RECT, STARTING POINT
        self.rect = self.image.get_rect()
        self.rect.x = 10
        self.rect.y = 10

    def getHealth(self):
        return self.healthbar_count
    
    #PASS IN +1 OR -1 TO INCREMENT / DECREMENT HEALTH BAR
    def setHealth(self, health):
        if health == 1: #INCREASE HEALTH, UNLESS self.healthbar_count is at 0
            self.healthbar_count -= 1
            if self.healthbar_count < 0:
                self.healthbar_count = 0
        elif health == -1: #DECREASE HEALTH, UNLESS self.healthbar_count is at 5
            self.healthbar_count += 1
            if self.healthbar_count > 5:
                self.healthbar_count = 5
